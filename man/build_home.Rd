% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build-home.R
\name{build_home}
\alias{build_home}
\title{Build home section}
\usage{
build_home(pkg = ".", override = list(), preview = NA, quiet = TRUE)
}
\arguments{
\item{pkg}{Path to package.}

\item{override}{An optional named list used to temporarily override
values in \verb{_pkgdown.yml}}

\item{preview}{If \code{TRUE}, or \code{is.na(preview) && interactive()}, will preview
freshly generated section in browser.}

\item{quiet}{Set to \code{FALSE} to display output of knitr and
pandoc. This is useful when debugging.}
}
\description{
This function generates the home page, converts \code{.md} files found in the
package root (and in \verb{.github/}), and builds an authors page from
\code{DESCRIPTION} and \code{inst/CITATION} (if present).
}
\details{
\subsection{Home page}{

The home page (\code{index.html}) main content is generated from
\code{pkgdown/index.md}, \code{index.md}, or \code{README.md}, in that order. Most
packages will use \code{README.md} because that’s also displayed by GitHub
and CRAN. Use \code{index.md} if you want your package website to look
different to your README, and use \verb{_pkgdown/index.md} if you don’t want
that file to live in your package root directory.

If you use \code{index.Rmd} or \code{README.Rmd} it’s your responsibility to knit
the document to create the corresponding \code{.md}. pkgdown does not do this
for you because it only touches files in the \verb{doc/} directory.

Extra markdown files in the base directory (e.g. \code{ROADMAP.md}) or in
\verb{.github/} (e.g. \code{CODE_OF_CONDUCT.md}) are copied by \code{build_home()} to
\verb{docs/} and converted to HTML.

The home page also features a sidebar with information extracted from
the package. You can tweak it via the configuration file, to help make
the home page an as informative as possible landing page.
}

\subsection{Images and figures}{

If you want to include images in your \code{README.md}, they must be stored
somewhere in the package so that they can be displayed on the CRAN
website. The best place to put them is \code{man/figures}. If you are
generating figures with R Markdown, make sure you set up \code{fig.path} as
followed:\preformatted{knitr::opts_chunk$set(
  fig.path = "man/figures/"
)
}

This should usually go in a chunk with \code{include = FALSE}.\preformatted{```\{r chunk-name, include=FALSE\}
knitr::opts_chunk$set(
  fig.path = "man/figures/"
)
```
}
}

\subsection{Package logo}{

If you have a package logo, you can include it at the top of your README
in a level-one heading:\preformatted{## pkgdown <img src="man/figures/logo.png" align="right" />
}

\code{\link[=init_site]{init_site()}} will also automatically create a favicon
set from your package logo.
}

\subsection{YAML config - home}{

To tweak the home page, you need a section of the configuration file
called \code{home}.
\subsection{Page title and description}{

By default, the page title and description are extracted automatically
from the \code{Title} and \code{Description} fields \code{DESCRIPTION} (stripping
single quotes off quoted words). CRAN ensures that these fields don’t
contain phrases like “R package” because that’s obvious on CRAN. To make
your package more findable on search engines, it’s good practice to
override the \code{title} and \code{description}, thinking about what people might
search for:\preformatted{home:
  title: An R package for pool-noodle discovery
  description: >
    Do you love R? Do you love pool-noodles? If so, you might enjoy
    using this package to automatically discover and add pool-noodles
    to your growing collection.
}

(Note the use of YAML’s \code{>} i.e. “YAML pipes”; this is a convenient way
of writing paragraphs of text.)
}

\subsection{README header}{

READMEs usually start with an \verb{<h1>} containing the package name. If
that feels duplicative with the package name in the navbar you can
remove it with \code{strip_header: true}:\preformatted{home:
  strip_header: true
}
}

\subsection{Other homepage tweaks}{

See the subsections about the sidebar and authors for more tweaks via
the pkgdown configuration file.
}

}

\subsection{Sidebar}{

By default, the sidebar automatically populated with the following
elements, in this order. To understand their creation, read on; to tweak
the content of the navbar, see the “YAML config - sidebar” section.
\itemize{
\item \code{links}: Useful links.
\item \code{licence}: Licensing information.
\item \code{community}: Links to ode of Conduct and contributing guide.
\item \code{citation}: Link to citation information.
\item \code{authors}: Author information.
\item \code{dev}: Development status badges.
}
\subsection{Sources of sidebar information}{
\itemize{
\item The sidebar links are automatically generated by inspecting the
\code{URL} and \code{BugReports} fields of the \code{DESCRIPTION}.
If your package is developed on GitHub, you can use
\code{usethis::use_github_links()} to populate these fields.
\item Licensing information if \code{LICENSE}/\code{LICENCE} or
\code{LICENSE.md}/\code{LICENCE.md} files are present.
\item Community information is linked in the side bar using the
\code{.github/CONTRIBUTING.md} and \code{.github/CODE_OF_CONDUCT.md} files, if
present.
\item Citation information from a \code{inst/CITATION} file is linked in the
side bar to the \href{https://testthat.r-lib.org/authors.html}{authors page}.
\item Author information from \code{DESCRIPTION}, see the dedicated section.
\item Development status badges found in \code{README.md}/\code{index.md}. pkgdown
identifies badges in three ways:
\itemize{
\item Any image-containing links between \verb{<!-- badges: start -->} and
\verb{<!-- badges: end -->}, as e.g. created by
\code{usethis::use_readme_md()} or \code{usethis::use_readme_rmd()}.
\item Any image-containing links within \verb{<div id="badges"></div>}.
\item Within the first paragraph, if it only contains image-containing
links.
}
}
}

\subsection{YAML config - sidebar}{

You can add additional links with a subsection called \code{links}, which
should contain a list of \code{text} + \code{href} elements:\if{html}{\out{<div class="yaml">}}\preformatted{home:
  links:
  - text: Link text
    href: https://website.com
  - text: Roadmap
    href: /roadmap.html
}\if{html}{\out{</div>}}

You can change the order of sidebar components: \code{links}, \code{licence},
\code{community}, \code{citation}, \code{authors}, \code{dev}; you can add a README table of
contents \code{toc}, you can add custom components. The example below creates
a sidebar whose only components will be the authors section, a custom
section, a table of contents for the README and a Dev Status section if
there are badges. The \code{text} will be treated as Markdown.\preformatted{home:
  sidebar:
    structure: [authors, custom, toc, dev]
    components:
      custom:
        title: Funding
        text: We are *grateful* for funding!
}

You can provide a ready-made sidebar HTML:\preformatted{home:
  sidebar:
    html: path-to-sidebar.html
}

Finally, you can completely remove the sidebar.\preformatted{home:
  sidebar: FALSE
}
}

}

\subsection{Authors}{

By default, pkgdown will display information related to authors in three
places
\itemize{
\item the sidebar;
\item the footer left part;
\item the author page.
}

Both the sidebar and footer are customizable so you could move the
authors information or remove it entirely from them, see the sidebar and
footer docs in respectively \code{?build_home} and \code{?build_footer}

Author ORCID identification numbers in the \code{DESCRIPTION} are linked
using the ORCID logo:\preformatted{Authors@R: c(
    person("Hadley", "Wickham", , "hadley@rstudio.com", role = c("aut", "cre"),
      comment = c(ORCID = "0000-0003-4757-117X")
    ),
    person("Jay", "Hesselberth", role = "aut",
      comment = c(ORCID = "0000-0002-6299-179X")
    )
  )
}
\subsection{YAML config - authors}{

You can tweak a few things via the \code{authors} YAML field:
\itemize{
\item filtering of authors for the sidebar and footer,
\item text before authors in the footer,
\item display of authors in the footer, sidebar and authors page,
\item text before and after authors on the authors page.
}

The “developers” list is populated by the maintainer (“cre”), authors
(“aut”), and funder (“fnd”) from the \code{DESCRIPTION}. You could choose
other roles for filtering. With the configuration below,
\itemize{
\item only the maintainer and funder(s) appear in the footer, after the
text “Crafted by”;
\item all authors and contributors appear in the sidebar;
\item the authors list on the authors page is preceded and followed by
some text.
}\if{html}{\out{
<!-- -->
}}
\preformatted{authors:
  footer:
    roles: [cre, fnd]
    text: "Crafted by"
  sidebar:
    roles: [aut, ctb]
  before: "This package is proudly brought to you by:"
  after: "Also refer to the [changelog](news/index.html) for more contributors. :pray:"
}

You can modify the authors’ display on the home page and author page by
adding a subsection for \code{authors}. Each entry in \code{authors} should be
named with the author’s name (matching \code{DESCRIPTION}) and can contain
\code{href} and/or \code{html} fields:
\itemize{
\item If \code{href} is provided, the author’s name will be linked to this URL.
\item If \code{html} is provided, it will be shown instead of the author’s
name. This is particularly useful if you want to display the logo of
a corporate sponsor.
}\if{html}{\out{
<!-- -->
}}
\preformatted{authors:
  firstname lastname:
    href: "http://name-website.com"
    html: "<img src='name-picture.png' height=24>"
}
}

}
}
